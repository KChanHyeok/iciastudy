반복제어문
1. for
    순차구조의 데이터를 처리할 때유용함.
    for in : 배열의 순번을 활용하기 위한 반복문
    for of : 배열의 원소를 순차적으로 활용하기 위한 반복문
    forEach(v, idx, array) : 배열 순회 전용 메소드

배열
    변수의 묶음. 대표적인 순차구조의 데이터 저장방식.
    
    원소의 추가 : push(새값), unshift(새값)
    원소의 삭제 : pop(), shift()

    배열 메소드
    1) splice(idx, n[, add_item list]) : 배열의 운소를 지정한 개수만큼 삭제
        idx : 삭제할 원소의 위치(순번)
        n : 삭제할 원소의 개수
        add_item list : 삭제 후 추가할 원소의 목록(새 원소들)
    2) concat(합칠배열)
        : 두개의 배열을 합친다. 원본인 두 배열의 변화는 없으며
          두 배열이 합쳐진 새로운 배열이 만들어 진다.
          (합쳐진 배열을 사용하려면 변수에 저장할 것)
    3) indexOf / lastIndexOf
        : 찾고자 하는 원소의 위치(순번)값으 알려준다
          lastIndexOf는 원소의 검색을 뒤에서 부터 처리하지만,
          순번은 앞에서부터 순번을 알려준다.
    4) includes
        : 배열에 찾고자 하는 원소가 있으면 true,
          없으면 false.
    5) sort : 배열을 정렬하는 메소드(오름차순).
        내림차순으로 정렬할 경우 역순 정렬용 함수를 활용.
    6) reverse : 배열을 역순으로 재배치.
    7) join([구분자]) : 배열을 문자열로 변환
        <-> split([구분자]) : 문자열을 배열로 변환. 
    8) slice(idx[, e_idx]) : 배열의 특정 부분을 추출하여 새 배열로 생성.
            원래 배열은 이상 없음.
            idx : 추출할 시작 위치(순번)
            e_idx : 추출할 마지막 위치(순번)
                    이값을 생략할 경우 시작위치부터
                    끝까지 추출한다.

    shallow copy : 한 배열을 다른 배열로 복사할 때
        모든 원소가 복사되는 것이 아니라,
        배열에 새로운 링크가 되는 것

        let nums = [1, 2, 3, 4, 5];
        let nums2 = nums;

        nums의 배열과 nums2의 배열은 같은 배열임!


데이터 관리
1. 개별 변수
2. 배열(변수의 묶음)
3. 객체


예제
학생 인원수 입력 > 인원수 만큼 input 태그 추가
> 점수를 입력 > 계산(버튼) > 총점, 평균 출력

createElement(요소 생성), appendChild(요소 추가)
여러 요소를 한꺼번에 가져오기(querySelectorAll)

